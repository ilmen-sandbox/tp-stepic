Язык разметки HTML
------------------------------------------------------------
Первоначально разрабатывался для разметки текста научных статей

HTML разметка очень "расслабленная", браузер пытается обработать как можно больше ошибок, чтобы показать как можно больше информации.

Виды тегов:
  1) Парные <head></head>, <a href=.../>
  2) Одиночные <meta .... >
  3) Принципиально парные <script ...></script> (для которых не существует сокрашенного варианта <тег></тег>)
  
Свойства HTML тегов:
  1) Регистронезависимые
      <BR>
      <br>
  2) Значения атрибутов могут быть без скобок
       color  =  red
      'color' = 'red'
      "color" = "red"
  3) Сокращенные атрибуты (только имя, без значения)
      disabled=0
      disabled
  4) Теги могут быть непарными
      <p></p>
      <p>
  5) Допускается перестановка тегов
      <b><i></i></b>
      <b><i></b></i>
  6) Допустимы "свои" выдуманные теги (парсер браузера на них не упадет)
      <magic></magic>
  
На заре браузеростроения, каждый браузер имел разные правила парсинга HTML, разное кол-во допустимых тегов и т.п.
Все это, в купе с "рассслабленной" разметкой HTML, приводило к тому, что страница выглядила по разному в разных браузерах.
Поэтому было решено сделать новый стандарт языка разметки XHTML, который как и HTML, позволял бы создавать гипертекстовые документы, но при этом обладал строгим синтаксисом XML, т.е. являлся бы валидным XML документом.

Особенности языка XHTML:
  1) Только нижний регистр тегов
  2) Значения атрибута всегда с ковычками (двойные или одиночные)
  3) Недопускается сокращение атрибутов (всегда в виде атрибут="значение")
  4) Теги всегда парные
  5) Строгая вложенность тегов (документ представим в виде дерева тегов)
  6) id вместо name
  7) Необходим тег <DOCTYPE>
  8) Тег <br /> допустим только внутри другого тега, например внутри <p></p>
    
DOCTYPE уточняет тип содержимого, указывает HTML парсеру как правильно разбирать данный документ.
  XHTML 1.1
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
  HTML 4.01 Transitional
    <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
  HTML 4.01 Strick (более строгая верстка)
    <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
  HTML 5
    <!DOCTYPE html>
  
HTML теги
------------------------------------------------------------
  У XML теги задают структуру документа и наполняют его данными.
  В HTML теги задают не только структуру и данные, но и задают семантику всего документа, как отрисовать каждый его элемент
  Семантика тегов взаимосвязана (например, margin элемента зависит от настроек его родителя)
  
  Некоторые теги:
    Тег <html>
      Тег обертка
        <html lang="EN"> - допускается указание языка документа (например для автовключения функции перевода в Chrome)
    Тег <link>
      Тегиспользуется для указания связанных документов.
      Имеет вид:
        <link rel="stylesheet" href="/style.css">
        <link rel="alternate" href="/feed.rss" type="application/rss+xml">
        
        Интерпретация атрибута REL:
          1) stylesheet - каскадная таблица стилей, загружается одновременно с документом, т.к. необходима для верстки
          2) alternate - альтернативное представление документа, может загружается с низким приоритетом (в виде RSS фида, в виде страницы, оптимизированной для печати и т.п.)
    Тег <script>
      Имеет вид: <script src="./jquery.js" charset="windows-1251" async></script>
      Необязательный атрибут charset задает разметку файла скриипта.
      Необязательный атрибут async включает ассинхронную загрузку и выполнение скрипта (в стандартном поведении, браузер при обнаружении тега <script> блокирует парсинг, загружает файл скрипта, выполняет его и только потом продолжает парсить страницу)


BEST PRACTICES (скорость загрузки страницы, latency)
  - Ссылки на CSS файлы (<link>) распологать в самом начале тега <head>.
    Браузер перерисовывает всю страницу после загрузки каждого тега <linK>
    В идеальных условиях, браузер должен сначала загрузиться все CSS стили и только потом начать парсить тело страницы, это сразу ее сверстать.
  - Ссылки на JS (<script>) помещать в самый конец файла
    В момент загрузки и выполнения JS скрипта браузер блокирует парсер, а значит пользователь получает задержку в несколько миллисекунд перед отрисовкой страницы.
    Если все ссылки на JS скрипты поместить в конец файла, то пользователь сразу увидит страницу, хоть и с неактивными элементами, а потом, после загрузки JS скриптов, сможет ими воспользоваться.
    

БЛОЧНЫЕ И СТРОЧНЫЕ ТЕГИ
------------------------------------------------------------
  Особенности блочных тегов:
    1) Ширина блока выставляется максимально возможной (100%).
    2) Блочные теги всегда начинаются С НОВОЙ СТРОКИ.
    3) Возможность явного указания размеров.
  
  Особенности строчных (inline) тегов:
    1) Строчные теги стараются занять минимально возможную ширину.
    2) Не прерывают строку, в которой встречаются (нет переноса).
    3) Размеры вычисляются автоматически, исходя из содержимого.
  
  Абстрактные контейнеры
      <div> - абстрактный блочный контейнер.
      <span> - абстрактный строковый контейнер.
    Абстрактные контейнеры - такие контейнеры, которые никак не меняют отображение содержимого.
    Браузер их никак не отображает на странице (по дефолту).
    Используются для структирирования документа и верстки с помощью CSS.
    Тег <div> может содержать в себе другие блочные и строчные теги.
    Тег <span> может содержать в себе только строчные теги.
  
  Тег <img> промежуточный - это строковый тег с возможностью задать его размеры
  

ГИПЕРССЫЛКИ
----------------------------------------------------
  Имеет вид:
    <a href="/market.html">Перейти в магазин</a>
    <a href="http://www.duckduckgo.com" targer="_blank">
      <img src="duck.png">
    </a>
    <a name="top"></a> - якорь на странице (не отображается)
    <a href="#top">Наверх</a> - гиперссылка на якорь страницы
    <a href="/authors.html#martinfowler">Мартин Фаулер</a> - гиперссылка на якорь другой страницы
    
  Внутри гиперссылки можно разместить как простой текст, так и сложную верстку (блочный дизайн Google Play Market, с картинкой, описанием, ценов внутри блока).
  
  Атрибуты:
    href - URL ссылки
    target - укажывает где открыть ссылку
      target="_blank" - открыть в новом окне
      если атрибут target не задан - открыть в том же окне
    name - сделает из гиперссылки некликабельный якорь на странице

  Действия браузера при щелчке по гиперссылке:
    - http, https, ftp - переход по ссылке
    - mailto - запуск почтового клиента
    - javascript - выполнение JS кода
    - #anchor - переход к якорю на странице
    
BEST PRACTICES (по открытию гиперссылок)
  - Если гиперссылка указывает на ресурс того же сайта - она должна открываться в том же окне
  - Если гиперссылка указывает на сторонний ресурс - она должна открываться в новом окне
  
ФОРМЫ
-----------------------------------------------
  Форма - просто контейнер для элементов, т.е. ни как не рендериться (в теории, а на практике дает отступ из-за блочной природы)
  Атрибут target, который работает также как и у гиперссылок
  Атрибут enctype - способ кодирования данных формы
    По умолчанию:     application/x-www-form-urlencoded
      Для (рас)шифровки: http://urldecode.org
      Приводит передаваемые данные к виду, допустимому к передачи в виде URL (национальные символы шифруются кодами).
      Например:
        "simple data" => "simple+data"
        "просто данные" => "%D0%BF%D1%80%D0%BE%D1%81%D1%82%D0%BE+%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D0%B5"
        "А" => "%D0%90" - т.к. кодировка UTF-8, то национальный символ преобразуется в HEX (2 байта), а байты записываются через символ %, В итоге, для передачи одного национального символа необходимо 6 байт (4 байта на HEX, и 2 байта на разделитель %).
        " " => "+" - некоторые знаки припинания недопустимы и преобразуются с помощью таблицы кодирования
        "+" => "%2B"
    Передача файлов:  multipart/form-data
      При передачи неэкранированных бинарных данных файла может быть нарушена работа HTTP протокола.
      Плюс, если передать файл в кодировке "application/x-www-form-urlencoded", его содержимое вырастит в разы.
      Поэтому, при использовании шифрования "multipart/form-data", файл передается в спец. безопасном виде (похожем на формат передачи прикрепленного файла в почте).
  

BEST PRACTICES (метод передачи данных на сервер)
  Тут все как в REST:
    GET  Используется только для запросов на чтение (например в форме задаем фильтр результатов и при submit отображаем отфильтрованный список)
    POST Используется только для запросов на изменение (создание новых записей, удаление заказа, обновление профиля и т.п.) 
  

ПОЛЯ ВВОДА ДАННЫХ НА ФОРМЕ
-----------------------------------------------
  Еще больше о множестве атрибутов для полей ввода на сайте: htmlbook.ru

  Элементы ввода формы
    input - универсальное поле, может быть:
      type="hidden" - невидимое
      type="text" - текстовое поле
      type="checkbox" - checkbox, переключатель да/нет
    button - кнопка
    textarea - многострочное поле ввода
    select , option - выпадающий список
  
  Тег <input>
    Имеет вид: <input type="text" name="username" value="" placeholder="Вася" autocomplete="off">
    Атрибуты:
      type - определяет внешний вид и функционал
      name - имя, с которым данный элемент попадет в запрос
      value - начальное знаечение, пользователь может изменить
      placeholder - подсказка для пользователя
      autocomplete - позволяет (от)включать автозаполнение поля уже вводимыми ранее данными (например, автоподстановка почтового адреса)
        Не стандартный атрибут, но поддерживается всеми браузерами
        Можно использовать там, где не критична безопасность ввода (кэп)

BEST PRACTICE (по полям ввода)
  - Всегда заполняйте атрибут placeholder
  - Используйте атрибут value для задания значений по умолчанию, там, где это уместно
  - Используйте атрибут value для восстановления введенных пользователем данных после обновления страницы
      Например: пользователь регистрируется, вводит неверную капчу,
      страница перезагружается с формулировкой "неверно введено значение капчи, повторите"
      Уместно при обнаружении некорректной капчи вернуть пользователю уже заполненую форму, с введенными ранее пользователем (некритичными) данными (взятыми из запроса)
