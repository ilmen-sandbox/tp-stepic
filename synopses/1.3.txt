Web-клиенты
  Консольные утилиты. Telnet.
  Библиотеки в ЯП. libcurl, urllib.
  Браузер.
  Фичи браузера: куки, сессии, Referer.
  Основной сценарий работы
  Классические web приложения
  One-page приложения
-------------------------------------------------------------------------

Часто используемые Web-клиенты (web-agent'ы):
  Web-клиенты в Python: libcurl, urllib
  Консольные утилиты в Linux: wget, curl, telnet
  Встроенные браузеры: web-kit, web-view и т.п.
  Десктопные браузеры: Chrome, firefox
  Мобильные браузеры обычно отстают в развитии от десктопных аналогов.

Telnet
  Позволяет открыть TCP соединение с сервером по IP и порту, отправить запрос, получить и вернуть ответ от Web-сервера.
  Полезен в отладке.
  Пример открытия TCP соединения:
    > telnet www.ya.ru 80
  Пример запроса в формате HTTP 1.1:
    > GET /index.html HTTP/1.1
    > Host: www.ya.ru
   
Curl
  GET запрос к серверу с отображением всех заголовков:
    > curl -vv 'http://api.site.com/method/?arg=1'
    > curl 
  POST запрос к серверу с авторизацией и передачей доп. заголовков:
    > curl -vv -d 'arg=1' -H'X-Token: 123' 'http://api.site.com/method/'
  
История браузеров в интерактивном виде
  http://www.evolutionoftheweb.com

Web-сервер vs Application-сервер
  Раньше, когда сайты были только страницами application-сервер не существовал.
  Теперь на запросы браузера к статическим документам (статические веб-страницы, картинки, стили, скрипты) отвечает web-сервер.
  Запросы к динамическим веб-страницам перехватывает Web-сервер и делегирует формирование страницы к Application-серверу
  
  Web-сервер         : статические документы
  Application-сервер : динамические документы
  
  Алгоритм работы старых Web-сайтов
    1) Браузер посылает запрос на сервер к (динамической) странице
    2) Application-сервер обрабатыывет запрос формируя Web-страницу, возвращет ответ браузеру
    3) Браузер парсит полученный HTML, запрашивает у сервера встречающиеся статические ресурсы
    4) Web-сервер отвечает на запросы браузера, мгновенно возвращая статические ресурсы
  С появлением AJAX (async javascript and xml) все изменилось...
  Алгоритм работы современных Web-сайтов
    1) Браузер посылает запрос на сервер к странице
    2) Web-сервер мгновенно отдает статическую страницу-болванку в ответ
    3) Браузер парсит полученный HTML, запрашивает у сервера встречающиеся статические ресурсы (файлы JS скриптов и т.д.)
    4) В браузере загруженные JS-скрипты начинают делать AJAX запросы к Application-серверу, наполняя страницу содержимым
    5) Appiication-сервер формирует JSON и XML для ответов на AJAX-запросы страницы и наполнения ее данными
