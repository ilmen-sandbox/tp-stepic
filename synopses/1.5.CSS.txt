НАСЛЕДУЕМЫЕ СТИЛИ - CSS
-----------------------------------------------------

  HTML создан для верстки простых (визуально) научных статей.
  Для современных Web-приложений возможностей верстки HTML недостаточно!
  Поэтому был создан стандарт CSS.
  На данный момент существуют несколько версий CSS: CSS 1, CSS 2, CSS 2.1, CSS 3
  Чем позднее версия, тем выше шанс что стили будут работать по разному в разных браузерах.
  
  CSS - Cascading Style Sheets

  СИНТАКСИС CSS
      
      .mid-play {
        padding:13px 0px 0px 13px;
      }
      p.inner-play a {
        color:#3c3c3c;
        text-decoration: underline;
      }
      .big-top {
        background-image: url(/img/pc/220_130_top.gif);
      }
      /* комментарии: cелектор { имя_стиля1: значение1; } */
      
    CSS - файл с набором правил
    Правило состоит из селектора и набора стилей (внутри фигурных скобок)
    Каждый стиль состоит из имени свойства и его значения в виде:
      <имя свойства>: <значение свойства>;
    Некоторые значения не кроссбраузерные.
    
  ИСПОЛЬЗОВАНИЕ СТИЛЕЙ
    Встроенные в браузер стили
      Внешний вид тега <h1>...</h1> в чистом HTML как раз обусловлен стандартными стилями, "зашитыми" в конкретный браузер
    Во внешнем файле
      <link rel="stylesheet" href="style.css">
    В коде HTML документа
      <style>...</style>
    Стили могут быть привязаны к конкретному тэгу
      <img style="margin: 3px" src="...">
      
  BEST PRACTICES (по использованию CSS)
    - Используйте CSS в отдельном файле (<link rel="stylesheet" href=...>), либо встроенные в браузер стили.
    - Нельзя использовать CSS в коде самой страницы, т.к. это безосновательно "раздувает" размеры страницы.
    - Стили лучше указывать как можно раньше в коде страницы, в идеале размещать так, чтобы сначала были загружены все стили, а потом уже тело страницы.
  
CSS СЕЛЕКТОРЫ
----------------------------------------------------
  Стили применяются к множеству элементов страницы.
  Селекторы позволяют задавать правила отбора этого множества из множества всех элементов страницы.
  
  ИДЕНТИФИКАТОРЫ И КЛАССЫ HTML ЭЛЕМЕНТОВ
    У каждого HTML тега есть два атрибута: id и class
    Например:
      <div id="userpic"><img src="..."></div>
      <button class="btn btn-main">Одобрить</button>
      <button class="btn">Написать комментарий</button>
    id - идентификатор элемента, ДОЛЖЕН БЫТЬ УНИКАЛЕН на странице
    class - список классов элемента (разделенные пробелами), КЛАССЫ МОГУТ ПОВТОРЯТЬ, один элемент может принадлежать нескольким классам
  
  БАЗОВЫЕ СЕЛЕКТОРЫ
    Универсальный селектор (выбирает все элементы на странице)
      * { margin: 0px; padding: 0px; border: 0px; }
      Обычно применяют для сброса стандартных стилей браузера
    Имена тэгов
      p { margin-top: 10px; }
    Имена классов (с точки)
      .btn { border: solid 1px gray; }
    id тэгов (с решетки)
      #userpic { padding: 10px }
      
  СЛОЖНЫЕ СЕЛЕКТОРЫ
    Контекстные (вложенные)
      Если в селекторе встречается пробел, то выражение разбирается с конца (с правой части от пробела).
      div .article { text-decoration: underline }
        Означает: выборать все элементы с классом article вложенные в элементы типа div (с пробелом - отношение "включает")
      div.article { text-decoration: underline }
        Означает: выборать все элементы div с классом article (нет пробела - "пересечение")
      div.article a { text-decoration: underline }
        Означает: выборать все элементы типа a (гиперссылки) вложенные в элементы div с классом article
    Дочерние (только прямые потомки (вложенность = 1 уровень))
      a > img { border: 2px }
        Означает: все элементы img, которые вложенные непосредственно в тег a (гиперссылка)
        Подходит (1 уровень):
          <a href="...">
            <img src="..."/>
          </a>
        Не подходит (2 уровень):
          <a href="...">
            <div class="...">
              <img src="..."/>
            </div>
          </a>
    Соседние
      h2 + p { margin-left: 30px }
        Означает: применить стиль ко всем параграфам, соседним по отношению к тегу <h2>
        Соседними называются элементы веб-страницы, когда они следуют непосредственно друг за другом в коде документа.
        Пробелы вокруг + не обязательны.
        Рассмотрим несколько примеров:
          <p>Lorem ipsum <b>dolor</b> sit amet.</p>
            Тег <b> является дочерним по отношению к тегу <p>, поскольку он находится внутри этого контейнера (не соседние).
          <p>Lorem ipsum <b>dolor</b> <var>sit</var> amet.</p>
            Теги <var> и <b> никак не перекрываются и представляют собой соседние элементы.
          <p>Lorem <b>ipsum </b> dolor sit amet, <i>consectetuer</i> adipiscing <tt>elit</tt>.</p>
            Соседними здесь являются теги <b> и <i>, а также <i> и <tt>. При этом <b> и <tt> к соседним элементам не относятся из-за того, что между ними расположен контейнер <i>.
    Группировка
      h1, h2 { color: red }
        Означает: выбрать все элементы типа h1 и все элементы типа h2 (отношение "объединение")
        
  ПСЕВДОКЛАССЫ
    Псевдоклассы не задаются в коде страницы, их автоматически назначает элементам страницы браузер в соответсвии с опеределенной логикой.
    Распространненые псевдо классы:
      a:visited ― посещенная ссылка
      a:link ― непосещенная ссылка
      div:hover ― элемент при наведении мыши (для реализации конт. меню или отображения что элемент активный, что с ним можно произвести некоторые действия)
      input:focus ― элемент при получении фокуса
      li:first-child ― выбирает первого потомка среди множества элементов
  
  BEST PRACTICES (псевдоклассы)
    Используйте псевдокласс :hover для выделения на странице активных элементов или для организации контекстного меню
    
  ПСЕВДОЭЛЕМЕНТЫ
    Это теги, создаваемые браузером автоматически в зависимости от стилей, не присутствующие в исходном коде страницы
    Псевдоэлементы создаются только если браузер найдет подобный селектор в стилях.
    #el:after ― виртуальный элемент сразу после #el
    #el:before ― виртуальный элемент непосредственно перед #el
    
    Пример решает проблему Джека Воробья, которого все забывали называть капитаном:
      .jack-sparrow:before {
        content: "Captain ";
        display: inline;
        /* У псевдоэлементов есть только перечисленные два свойства */
      }


НАСЛЕДОВАНИЕ И ПРИОРИТЕТЫ СТИЛЕЙ
------------------------------------------------
  НАСЛЕДОВАНИЕ СТИЛЕЙ
    Некоторые стили, примененные например к элементу div применяются и к его потомкам.
    Точных правил, определяющих какие стили настледуются, а какие - нет, не существует.
    Обычно наследубтся стили, определяющие внешный вид текста.
  
  ПРИОРИТЕТЫ СТИЛЕЙ
    CSS позволяет создавать конкурирующие стили, т.е. несколько стилей, множества элементов которых пересекается.
    В случае, если два разных стиля конфликтуют между собой, применяется тот, что обладает большей специфичностью.
    Если специфичность двух стилей совпадает, применяется тот, что расположен ниже в HTML/CSS коде.
    Указание в значение стиля флага !important позволяет перекрыть проверку специфичности
    
    Правила расчета специфичности:
      - использование id – 100
      - использование класса или псевдокласса – 10
      - использование тэга или псевдоэлемента – 1
      Например:
        Так, например, селектор ul.info ol + li обладает специфичностью 13, а селектор li.red.level специфичностью 21 балл.
    Еще о расчете специфичности селекторов: https://habrahabr.ru/post/137588/
    
  BEST PRACTICES (по приоритетам)
    Не нужно давать конкретных стилей по низкоспецифичных селекторов.
      Пример низкоспецифичного селектора: a { color: red }
      Например:
       Если нужно определить особенные отступы только для одного элемента на странице, логичнее написать селектор по его id.
    Чем меньше специфичность тем проще и легке должны быть стили.
    
ОТОБРАЖЕНИЕ ЭЛЕМЕНТОВ
----------------------------------------------------------------
  Режимы отображения элементов
    display: none ― элемент невидим, не занимает места
    display: block ― элемент занимает максимальную ширину, начинается с новой строки, учитывает width, height. Отступы работают.
    display: inline ― элемент занимает минимальную ширину, и не прерывает строку, игнорирует width, height. Отступы по ширине работают.
    display: inline-block ― блочный элемент, но не разрывает строку, примерно как img. Отступы работают.
    
  FLOAT & CLEAR
    Изначально стиль float был придуман для задания "обтекания" картинок текстом.
    Варианты:
      float: left - элемент "всплывает" влево верх
      float: right - элемент "всплывает" право вверж
      clear: both - отменяет всплывание, «проводит черту переноса» после элмента
    
    Сейчас float применяют для блочной верстки.
    Факты:
      - Два элемента с одинаковым значением свойства float выстраиваются друг за другом
      - Float-элементы могут раздвигать только float-контейнеры
          Элемент со свойством float не раздвигает границы родительского контейнера, если у контейнера не установлено свойство float.
          Для такого контейнера размер float-элемента 0x0 пикселей.
      - Если несколько подряд идущих float-элементов элементов не вмещаются в контейнер по ширине, то лишние элементы переносятся на новую строку.
      
  BEST PRACTICES
    Для разделения страницы на две части нужно создать два float-контейнера с шириной 50% (или 20% и 80% или т.п.), без отступов и с одинаковым значением свойства float.
      Пример 1:
        .left, .right { float: left; width: 50% } .all { float: left; width: 100% }
        <div class="all">
          <div class="left">...</div>
          <div class="right">...</div>
        </div>
        
      Пример 2:
        .left, .right { float: left; width: 50% } .all { float: left; width: 100% } .all:after { clear: both }
        <div class="all">
          <div class="left">...</div>
          <div class="right">...</div>
        </div>
ПОЗИЦИОНИРОВАНИЕ
----------------------------------------------------------------
  Варианты позиционирования элемента:
    position: static ― обычное расположение (обыные правила, с учетом свойств float и display)
    position: relative ― смещение относительно начального местоположения на странице
    position: absolute ― если родитель relative, absolute или fixed – относительно родителя, иначе - относительно начала документа
    position: fixed ― (для блочных) относительно окна браузера top/right/bottom/left - отступы, могут быть отрицательными
    
  BEST PRACTICES
    С помощью position: fixed можно сделать модальные окна ("удалить элемент ...?"), заголовки таблиц, шапку сайта и т.п.
    Для отображения кнопки в правом верхнем углу задайте такие свойства:
      .close-btn {
        width: 20; height: 20;
        position: absolute;
        top: 10; right: 10;
      }
    
ОТСТУПЫ И BOX-MODEL
------------------------------------------------------------------
  Box-model:
    margin
      border
        padding
          содержимое элемента
          
  Размеры элемента определяются иерархически:
    размер содержимого + размеры внутреннего отступа (padding) + размеры границы (border) + размеры внешнего отступа (margin)
  
  Варианты задания размеров (для margin, border, padding):
    margin: 10px;               - все границы по 10 пикселей
    margin: 10px 5px;           - верхняя и нижняя граница - 10 пикселей, правая и левая - 5 пикселей
    margin: 10px 7px 5px 3px;   - указывается размер каждой границы, начиная с верхней, обходя границы по направлению часовой стрелки 

  Расчет размеров элемента (box-sizing):
    1) content-box (по умолчанию)
      Размерами элемента считаются размеры его содержимого, без учета padding И border
    2) border-box
      Размерами элемента считаются размеры его границы (border + padding + содержимое)
    
    Пример:
      div.article {
        box-sizing: border-box;
      }
  
BOOTSTRAP
  Bootstrap - готовая библиотека стилей (CSS-фраймворк) от компании Twitter.
  Позволяет разрабатывать приемлемый дизайн при базовых знаниях CSS.
