Язык разметки HTML
------------------------------------------------------------
Первоначально разрабатывался для разметки текста научных статей

HTML разметка очень "расслабленная", браузер пытается обработать как можно больше ошибок, чтобы показать как можно больше информации.

Виды тегов:
  1) Парные <head></head>, <a href=.../>
  2) Одиночные <meta .... >
  3) Принципиально парные <script ...></script> (для которых не существует сокрашенного варианта <тег></тег>)
  
Свойства HTML тегов:
  1) Регистронезависимые
      <BR>
      <br>
  2) Значения атрибутов могут быть без скобок
       color  =  red
      'color' = 'red'
      "color" = "red"
  3) Сокращенные атрибуты (только имя, без значения)
      disabled=0
      disabled
  4) Теги могут быть непарными
      <p></p>
      <p>
  5) Допускается перестановка тегов
      <b><i></i></b>
      <b><i></b></i>
  6) Допустимы "свои" выдуманные теги (парсер браузера на них не упадет)
      <magic></magic>
  
На заре браузеростроения, каждый браузер имел разные правила парсинга HTML, разное кол-во допустимых тегов и т.п.
Все это, в купе с "рассслабленной" разметкой HTML, приводило к тому, что страница выглядила по разному в разных браузерах.
Поэтому было решено сделать новый стандарт языка разметки XHTML, который как и HTML, позволял бы создавать гипертекстовые документы, но при этом обладал строгим синтаксисом XML, т.е. являлся бы валидным XML документом.

Особенности языка XHTML:
  1) Только нижний регистр тегов
  2) Значения атрибута всегда с ковычками (двойные или одиночные)
  3) Недопускается сокращение атрибутов (всегда в виде атрибут="значение")
  4) Теги всегда парные
  5) Строгая вложенность тегов (документ представим в виде дерева тегов)
  6) id вместо name
  7) Необходим тег <DOCTYPE>
  8) Тег <br /> допустим только внутри другого тега, например внутри <p></p>
    
DOCTYPE уточняет тип содержимого, указывает HTML парсеру как правильно разбирать данный документ.
  XHTML 1.1
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
  HTML 4.01 Transitional
    <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
  HTML 4.01 Strick (более строгая верстка)
    <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
  HTML 5
    <!DOCTYPE html>
  
HTML теги
------------------------------------------------------------
  У XML теги задают структуру документа и наполняют его данными.
  В HTML теги задают не только структуру и данные, но и задают семантику всего документа, как отрисовать каждый его элемент
  Семантика тегов взаимосвязана (например, margin элемента зависит от настроек его родителя)
  
  Некоторые теги:
    Тег <html>
      Тег обертка
        <html lang="EN"> - допускается указание языка документа (например для автовключения функции перевода в Chrome)
    Тег <link>
      Тегиспользуется для указания связанных документов.
      Имеет вид:
        <link rel="stylesheet" href="/style.css">
        <link rel="alternate" href="/feed.rss" type="application/rss+xml">
        
        Интерпретация атрибута REL:
          1) stylesheet - каскадная таблица стилей, загружается одновременно с документом, т.к. необходима для верстки
          2) alternate - альтернативное представление документа, может загружается с низким приоритетом (в виде RSS фида, в виде страницы, оптимизированной для печати и т.п.)
    Тег <script>
      Имеет вид: <script src="./jquery.js" charset="windows-1251" async></script>
      Необязательный атрибут charset задает разметку файла скриипта.
      Необязательный атрибут async включает ассинхронную загрузку и выполнение скрипта (в стандартном поведении, браузер при обнаружении тега <script> блокирует парсинг, загружает файл скрипта, выполняет его и только потом продолжает парсить страницу)
      
BEST PRACTICES (скорость загрузки страницы, latency)
  - Ссылки на CSS файлы (<link>) распологать в самом начале тега <head>.
    Браузер перерисовывает всю страницу после загрузки каждого тега <linK>
    В идеальных условиях, браузер должен сначала загрузиться все CSS стили и только потом начать парсить тело страницы, это сразу ее сверстать.
  - Ссылки на JS (<script>) помещать в самый конец файла
    В момент загрузки и выполнения JS скрипта браузер блокирует парсер, а значит пользователь получает задержку в несколько миллисекунд перед отрисовкой страницы.
    Если все ссылки на JS скрипты поместить в конец файла, то пользователь сразу увидит страницу, хоть и с неактивными элементами, а потом, после загрузки JS скриптов, сможет ими воспользоваться.
    
    
    
